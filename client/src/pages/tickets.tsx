import { useState } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Ticket, AlertTriangle, Clock, CheckCircle, XCircle, Search, Filter } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { queryClient } from "@/lib/queryClient";

interface TicketData {
  id: number;
  ticketNumber: string;
  title: string;
  description: string;
  priority: "Low" | "Medium" | "High" | "Critical";
  status: "Open" | "In Progress" | "Resolved" | "Closed";
  category: "Hardware" | "Software" | "Network" | "Security";
  deviceId?: number;
  assignedTo?: string;
  createdBy: string;
  createdAt: string;
  updatedAt: string;
  resolvedAt?: string;
  isAutoGenerated: boolean;
  triggerEvent?: string;
  notes?: string;
}

const priorityColors = {
  Low: "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200",
  Medium: "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200",
  High: "bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200",
  Critical: "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200"
};

const statusColors = {
  Open: "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200",
  "In Progress": "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200",
  Resolved: "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200",
  Closed: "bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200"
};

const getStatusIcon = (status: string) => {
  switch (status) {
    case "Open": return <AlertTriangle className="h-4 w-4" />;
    case "In Progress": return <Clock className="h-4 w-4" />;
    case "Resolved": return <CheckCircle className="h-4 w-4" />;
    case "Closed": return <XCircle className="h-4 w-4" />;
    default: return <Ticket className="h-4 w-4" />;
  }
};

export default function Tickets() {
  const { toast } = useToast();
  const [searchTerm, setSearchTerm] = useState("");
  const [statusFilter, setStatusFilter] = useState<string>("all");
  const [priorityFilter, setPriorityFilter] = useState<string>("all");
  const [selectedTicket, setSelectedTicket] = useState<TicketData | null>(null);
  const [closeTicketDialogOpen, setCloseTicketDialogOpen] = useState(false);
  const [resolvedBy, setResolvedBy] = useState("");
  const [resolutionNotes, setResolutionNotes] = useState("");

  const { data: tickets = [], isLoading, error } = useQuery<TicketData[]>({
    queryKey: ["/api/tickets"],
  });

  const { data: devices = [] } = useQuery<any[]>({
    queryKey: ["/api/devices"],
  });

  const closeTicketMutation = useMutation({
    mutationFn: async ({ ticketId, resolvedBy, notes }: { ticketId: number; resolvedBy: string; notes?: string }) => {
      const res = await fetch(`/api/tickets/${ticketId}/close`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ resolvedBy, notes }),
      });

      if (!res.ok) {
        throw new Error(await res.text());
      }

      return res.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/tickets"] });
      toast({
        title: "Success",
        description: "Ticket closed successfully",
      });
      setCloseTicketDialogOpen(false);
      setResolvedBy("");
      setResolutionNotes("");
      setSelectedTicket(null);
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: `Failed to close ticket: ${error.message}`,
        variant: "destructive",
      });
    },
  });

  const filteredTickets = tickets.filter(ticket => {
    const matchesSearch = ticket.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         ticket.ticketNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         ticket.description.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesStatus = statusFilter === "all" || ticket.status === statusFilter;
    const matchesPriority = priorityFilter === "all" || ticket.priority === priorityFilter;
    
    return matchesSearch && matchesStatus && matchesPriority;
  });

  const getDeviceName = (deviceId?: number) => {
    if (!deviceId) return "N/A";
    const device = devices.find(d => d.id === deviceId);
    return device ? device.name : `Device #${deviceId}`;
  };

  const handleCloseTicket = () => {
    if (!selectedTicket || !resolvedBy.trim()) {
      toast({
        title: "Error",
        description: "Please enter who resolved the ticket",
        variant: "destructive",
      });
      return;
    }

    closeTicketMutation.mutate({
      ticketId: selectedTicket.id,
      resolvedBy: resolvedBy.trim(),
      notes: resolutionNotes.trim() || undefined,
    });
  };

  if (isLoading) {
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <h1 className="text-3xl font-bold">Support Tickets</h1>
        </div>
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto"></div>
            <p className="mt-2 text-muted-foreground">Loading tickets...</p>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <h1 className="text-3xl font-bold">Support Tickets</h1>
        </div>
        <Card>
          <CardContent className="pt-6">
            <div className="text-center text-red-600">
              <AlertTriangle className="h-8 w-8 mx-auto mb-2" />
              <p>Failed to load tickets</p>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold">Support Tickets</h1>
        <div className="flex items-center gap-2">
          <Badge variant="outline" className="text-sm">
            {filteredTickets.length} tickets
          </Badge>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center">
              <AlertTriangle className="h-4 w-4 text-blue-600" />
              <div className="ml-2">
                <p className="text-2xl font-bold">{tickets.filter(t => t.status === "Open").length}</p>
                <p className="text-xs text-muted-foreground">Open</p>
              </div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center">
              <Clock className="h-4 w-4 text-purple-600" />
              <div className="ml-2">
                <p className="text-2xl font-bold">{tickets.filter(t => t.status === "In Progress").length}</p>
                <p className="text-xs text-muted-foreground">In Progress</p>
              </div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center">
              <CheckCircle className="h-4 w-4 text-green-600" />
              <div className="ml-2">
                <p className="text-2xl font-bold">{tickets.filter(t => t.status === "Resolved").length}</p>
                <p className="text-xs text-muted-foreground">Resolved</p>
              </div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center">
              <Ticket className="h-4 w-4 text-orange-600" />
              <div className="ml-2">
                <p className="text-2xl font-bold">{tickets.filter(t => t.isAutoGenerated).length}</p>
                <p className="text-xs text-muted-foreground">Auto-Generated</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Filters */}
      <Card>
        <CardContent className="pt-6">
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="relative flex-1">
              <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search tickets..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-8"
              />
            </div>
            <Select value={statusFilter} onValueChange={setStatusFilter}>
              <SelectTrigger className="w-full sm:w-[150px]">
                <SelectValue placeholder="Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="Open">Open</SelectItem>
                <SelectItem value="In Progress">In Progress</SelectItem>
                <SelectItem value="Resolved">Resolved</SelectItem>
                <SelectItem value="Closed">Closed</SelectItem>
              </SelectContent>
            </Select>
            <Select value={priorityFilter} onValueChange={setPriorityFilter}>
              <SelectTrigger className="w-full sm:w-[150px]">
                <SelectValue placeholder="Priority" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Priority</SelectItem>
                <SelectItem value="Low">Low</SelectItem>
                <SelectItem value="Medium">Medium</SelectItem>
                <SelectItem value="High">High</SelectItem>
                <SelectItem value="Critical">Critical</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </CardContent>
      </Card>

      {/* Tickets Table */}
      <Card>
        <CardHeader>
          <CardTitle>Tickets</CardTitle>
        </CardHeader>
        <CardContent>
          {filteredTickets.length === 0 ? (
            <div className="text-center py-8">
              <Ticket className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
              <h3 className="text-lg font-semibold mb-2">No tickets found</h3>
              <p className="text-muted-foreground">
                {tickets.length === 0 
                  ? "No support tickets have been created yet."
                  : "No tickets match your current filters."
                }
              </p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Ticket #</TableHead>
                    <TableHead>Title</TableHead>
                    <TableHead>Device</TableHead>
                    <TableHead>Priority</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Category</TableHead>
                    <TableHead>Created</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredTickets.map((ticket) => (
                    <TableRow key={ticket.id}>
                      <TableCell className="font-mono text-sm">
                        <div className="flex items-center gap-2">
                          {ticket.ticketNumber}
                          {ticket.isAutoGenerated && (
                            <Badge variant="secondary" className="text-xs">AUTO</Badge>
                          )}
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="max-w-xs">
                          <p className="font-medium truncate">{ticket.title}</p>
                          <p className="text-sm text-muted-foreground truncate">{ticket.description}</p>
                        </div>
                      </TableCell>
                      <TableCell>{getDeviceName(ticket.deviceId)}</TableCell>
                      <TableCell>
                        <Badge className={priorityColors[ticket.priority]}>
                          {ticket.priority}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          {getStatusIcon(ticket.status)}
                          <Badge className={statusColors[ticket.status]}>
                            {ticket.status}
                          </Badge>
                        </div>
                      </TableCell>
                      <TableCell>{ticket.category}</TableCell>
                      <TableCell className="text-sm">
                        {new Date(ticket.createdAt).toLocaleDateString()}
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <Dialog>
                            <DialogTrigger asChild>
                              <Button variant="outline" size="sm">
                                View
                              </Button>
                            </DialogTrigger>
                            <DialogContent className="max-w-2xl">
                              <DialogHeader>
                                <DialogTitle>Ticket Details - {ticket.ticketNumber}</DialogTitle>
                              </DialogHeader>
                              <div className="space-y-4">
                                <div className="grid grid-cols-2 gap-4">
                                  <div>
                                    <Label className="text-sm font-medium">Status</Label>
                                    <div className="flex items-center gap-2 mt-1">
                                      {getStatusIcon(ticket.status)}
                                      <Badge className={statusColors[ticket.status]}>
                                        {ticket.status}
                                      </Badge>
                                    </div>
                                  </div>
                                  <div>
                                    <Label className="text-sm font-medium">Priority</Label>
                                    <Badge className={`${priorityColors[ticket.priority]} mt-1`}>
                                      {ticket.priority}
                                    </Badge>
                                  </div>
                                  <div>
                                    <Label className="text-sm font-medium">Category</Label>
                                    <p className="mt-1">{ticket.category}</p>
                                  </div>
                                  <div>
                                    <Label className="text-sm font-medium">Device</Label>
                                    <p className="mt-1">{getDeviceName(ticket.deviceId)}</p>
                                  </div>
                                </div>
                                <div>
                                  <Label className="text-sm font-medium">Description</Label>
                                  <p className="mt-1 text-sm">{ticket.description}</p>
                                </div>
                                {ticket.notes && (
                                  <div>
                                    <Label className="text-sm font-medium">Notes</Label>
                                    <p className="mt-1 text-sm">{ticket.notes}</p>
                                  </div>
                                )}
                                <div className="grid grid-cols-2 gap-4 text-sm text-muted-foreground">
                                  <div>
                                    <Label className="text-sm font-medium">Created By</Label>
                                    <p className="mt-1">{ticket.createdBy}</p>
                                  </div>
                                  <div>
                                    <Label className="text-sm font-medium">Created At</Label>
                                    <p className="mt-1">{new Date(ticket.createdAt).toLocaleString()}</p>
                                  </div>
                                </div>
                                {ticket.status === "Open" && (
                                  <div className="pt-4 border-t">
                                    <Button 
                                      onClick={() => {
                                        setSelectedTicket(ticket);
                                        setCloseTicketDialogOpen(true);
                                      }}
                                      className="w-full"
                                    >
                                      Close Ticket
                                    </Button>
                                  </div>
                                )}
                              </div>
                            </DialogContent>
                          </Dialog>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Close Ticket Dialog */}
      <Dialog open={closeTicketDialogOpen} onOpenChange={setCloseTicketDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Close Ticket - {selectedTicket?.ticketNumber}</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label htmlFor="resolvedBy">Resolved By *</Label>
              <Input
                id="resolvedBy"
                value={resolvedBy}
                onChange={(e) => setResolvedBy(e.target.value)}
                placeholder="Enter your name"
                className="mt-1"
              />
            </div>
            <div>
              <Label htmlFor="resolutionNotes">Resolution Notes</Label>
              <Textarea
                id="resolutionNotes"
                value={resolutionNotes}
                onChange={(e) => setResolutionNotes(e.target.value)}
                placeholder="Describe how the issue was resolved (optional)"
                className="mt-1"
              />
            </div>
            <div className="flex justify-end gap-2">
              <Button variant="outline" onClick={() => setCloseTicketDialogOpen(false)}>
                Cancel
              </Button>
              <Button 
                onClick={handleCloseTicket}
                disabled={closeTicketMutation.isPending || !resolvedBy.trim()}
              >
                {closeTicketMutation.isPending ? "Closing..." : "Close Ticket"}
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}